import { useEffect, useState } from "react";
import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useQuery } from "@tanstack/react-query";
import { CardList } from "@/components/Card/CardList";
import { Loading } from "@/components/Loading";
import { useFetcher } from "../components/common/hooks/useFetcher";
import { withDataCheck } from "@/components/common/hocs/withDataCheck";
import { CardInterface } from "@/components/common/types/card.types";
import {
  getWithExpiry,
  handlerFavorite,
  setWithExpiry,
} from "@/components/common/utils/localStorageUtils";
import { pickProperties } from "@/components/common/utils/propertyUtils";
import {
  DEFAULT_VALUE,
  PICKED_KEYS,
} from "@/components/common/constants/cardConstants";
import { Pagination } from "@mantine/core";
import { useLocalStorage } from "@mantine/hooks";
import { RandomCatModal } from "@/components/Modal/RandomCatModal";
import { getDailyItem } from "@/components/common/utils/getDailyItem";

const inter = Inter({ subsets: ["latin"] });

const EnhancedCardList = withDataCheck(CardList);

const Home = () => {
  const [favorites, setFavorites] =
    useLocalStorage<CardInterface[]>(DEFAULT_VALUE);
  const [catList, setCatList] = useState<CardInterface[]>([]);
  const [isVerify, setIsVerify] = useState<boolean>(false);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [breedCat, setBreedCat] = useState<CardInterface>();
  const [pinError, setPinError] = useState<boolean>(false);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const itemsPerPage = 8;

  const { data: fetchCatList } = useFetcher();
  const { data: fetchCatImage } = useFetcher();
  const { isLoading, error, data } = useQuery<CardInterface[]>({
    queryKey: ["catList"],
    queryFn: async () => {
      const catList: CardInterface[] = await fetchCatList(
        "breeds?limit=21&page=0"
      );
      const newCatList = catList.map((cat) => pickProperties(cat, PICKED_KEYS));
      const catsWithImages = await Promise.all(
        newCatList.map((cat: CardInterface): Promise<CardInterface> => {
          return fetchCatImage("images", cat.reference_image_id).then(
            (image) => ({
              ...cat,
              imageUrl: image.url,
            })
          );
        })
      );
      setCatList(catsWithImages);
      return catsWithImages;
    },
  });

  useEffect(() => {
    if (catList?.length) {
      const modalShown = getWithExpiry("daily-cat-breed");
      if (!modalShown) {
        setIsModalOpen(true);
        const dailyCat = getDailyItem(catList);
        setBreedCat(dailyCat);
        setWithExpiry("daily-cat-breed", dailyCat);
      }
    }
  }, [catList]);

  const handleVerifyCode = (value: string) => {
    const catBreedStr = breedCat?.name.split(" ").join("").toLowerCase();
    if (value.toLowerCase() === catBreedStr) {
      setIsVerify(true);
      setPinError(false);
    } else {
      setPinError(true);
    }
  };

  const handleFavoritesList = (cardData: CardInterface) => {
    handlerFavorite(cardData, favorites, setFavorites);
  };

  if (isLoading) return <Loading />;
  if (error) return "An error has occurred: " + error.message;

  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentItems = catList.slice(startIndex, startIndex + itemsPerPage);
  const totalPages = Math.ceil(catList.length / itemsPerPage);

  return (
    <>
      <Head>
        <title>Cat Land</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <RandomCatModal
          opened={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          catInfo={breedCat}
          handleVerifyCode={handleVerifyCode}
          isVerify={isVerify}
          pinError={pinError}
        />

        <EnhancedCardList
          cardData={currentItems}
          handleFavorite={handleFavoritesList}
        />
        <Pagination
          value={currentPage}
          onChange={setCurrentPage}
          total={totalPages}
          color="orange.6" size="sm" withEdges
        />
      </main>
    </>
  );
};

export default Home;
